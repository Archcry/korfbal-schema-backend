#!/usr/bin/env node
'use strict';

/* tslint:disable:no-console */
/* tslint:disable:no-var-requires */
const http = require('http');

try {
    const env = require('../config/env.json');

    startServer(env);
} catch (err) {
    console.log(err);
}

function startServer(env) {
    env.port = normalizePort(env.port);

    const main = new (require('../src/main'))(env);
    const server = http.createServer(main.App);

    main.initialize().then(() => {
        main.App.set('port', env.port);

        server.listen(env.port);

        server.on('error', onError);
        server.on('listening', main.onListening.bind(main));
    }).catch((err) => {
        console.log(err);
    });
}

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}